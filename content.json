{"meta":{"title":"Jlex の Blog","subtitle":"书山有路勤为径，学海无涯苦作舟","description":"一位不专心搞地质的CS Learner","author":"钟军","url":"https://jlexzhong.github.io/blog","root":"/blog/"},"pages":[{"title":"标签","date":"2021-08-23T15:01:42.000Z","updated":"2021-08-30T11:42:58.175Z","comments":true,"path":"tags/index.html","permalink":"https://jlexzhong.github.io/blog/tags/index.html","excerpt":"","text":""},{"title":"link","date":"2021-08-30T11:46:35.000Z","updated":"2021-08-30T11:46:55.370Z","comments":true,"path":"link/index.html","permalink":"https://jlexzhong.github.io/blog/link/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-08-23T15:00:09.000Z","updated":"2021-08-30T03:20:51.821Z","comments":true,"path":"categories/index.html","permalink":"https://jlexzhong.github.io/blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Python批量删除含有指定字符的文件或文件夹","slug":"python-delete-files-in-batches","date":"2021-08-30T15:18:38.000Z","updated":"2021-08-30T16:05:06.208Z","comments":true,"path":"2021/08/30/python-delete-files-in-batches/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/python-delete-files-in-batches/","excerpt":"","text":"Python批量删除含有指定字符的文件或文件夹# encoding: UTF-8 import os from pathlib import Path p = Path(r'./test/erli') # 这里不得不感慨，Python的库，几乎满足你所有需要，看，连这个递归查找过滤都有了！ # 实现思路：递归遍历文件夹中的文件，如果文件名包含\"(-)\"，就删掉，下面是代码： for file in p.rglob('*(-)*'): if os.path.isfile(file): #这里判断下，如果是文件夹就先不删 os.remove(file) 参考： https://www.jianshu.com/p/17ae57c19d1d","categories":[{"name":"python","slug":"python","permalink":"https://jlexzhong.github.io/blog/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://jlexzhong.github.io/blog/tags/python/"},{"name":"算法","slug":"算法","permalink":"https://jlexzhong.github.io/blog/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"tensorflow2 模型的保存和载入 h5和ckpt的用法 | 小记","slug":"tensorflow-load-and-save","date":"2021-08-30T15:17:40.000Z","updated":"2021-08-30T16:06:18.359Z","comments":true,"path":"2021/08/30/tensorflow-load-and-save/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/tensorflow-load-and-save/","excerpt":"","text":"tensorflow2 模型的保存和载入 h5和ckpt的用法 | 小记断点续训/检查点# 断点续训 checkpoint_path = 'ckpt/transfer_{epoch:02d}-{val_acc:.2f}.ckpt' # 格式化字符，防止文件名冲突 checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(checkpoint_path, # 保存路径 monitor='val_acc', # 监测指标，这里是测试集的acc save_weights_only=False, #是否只保存权重 mode='auto', period=1 # 每period个周期保存一次 ) # 需要在fit/fit_generator()中添加该回调函数 history_ft = model.fit_generator( train_generator, steps_per_epoch=steps_per_epoch, epochs=epochs, validation_data=validation_generator, validation_steps=validation_steps, callbacks = [checkpoint_callback]) 保存全部模型（ckpt）：读取方法： model = tf.keras.models.load_model('./ckpt/transfer_03-0.98.ckpt') 保存全部模型（h5）:读取方法: model = load_model('./ckpt/transfer_06-0.94.h5') 仅保存权重（ckpt）：读取方法： checkpoint_path = 'ckpt/transfer_{epoch:02d}-{val_acc:.2f}.ckpt' checkpoint_dir = os.path.dirname(checkpoint_path) latest_model = tf.train.latest_checkpoint(checkpoint_dir) # 找到最新保存的断点 model.load_weights(latest_model) # 读取权重，model的结构必须与训练的网络结构一致 仅保存权重（h5）model.load_weights('./ckpt/transfer_18-0.97.h5') tf.train.latest_checkpoint() 方法用于找到目录下最新的检查点 并且似乎只对ckpt有作用 model.save()保存模型path_save_model = 'model/my_saved_InceptionV3_model.h5' model.save(path_save_model, overwrite=True)","categories":[{"name":"Tensorflow","slug":"Tensorflow","permalink":"https://jlexzhong.github.io/blog/categories/Tensorflow/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"https://jlexzhong.github.io/blog/tags/tensorflow/"},{"name":"深度学习","slug":"深度学习","permalink":"https://jlexzhong.github.io/blog/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"pyqt5小记| QSS开源暗黑主题qdarkstyle ，读取QSS主题文件","slug":"pyqt-qss-qdarkstyle","date":"2021-08-30T15:17:11.000Z","updated":"2021-08-30T15:50:56.445Z","comments":true,"path":"2021/08/30/pyqt-qss-qdarkstyle/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/pyqt-qss-qdarkstyle/","excerpt":"","text":"pyqt5小记| QSS开源暗黑主题qdarkstyle ，读取QSS主题文件安装Pip install qdarkstyle 使用import sys from PyQt5.QtGui import QIcon import qdarkstyle from PyQt5 import QtCore from PyQt5.QtWidgets import QApplication, QMainWindow if __name__ == '__main__': app = QApplication(sys.argv) app.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling) # 适应高分辨率 # qdarkstyle # 设置qdarkstyle！！！ app.setStyleSheet(qdarkstyle.load_stylesheet()) # myMainWindow = QMainWindow() myUi = wMain.Ui_MainWindow() myUi.setupUi(myMainWindow) myMainWindow.setWindowTitle('ZDEMViewer 离散元数值模拟可视化程序') myMainWindow.setWindowIcon(QIcon(\"./icons/logo.ico\")) myMainWindow.show() sys.exit(app.exec_()) 效果![](pyqt-qss-qdarkstyle/暗黑主题 2021-08-19 113230.png) 如何读取QSS文件作为GUI主题with open('./QSS/myQSS.qss', encoding='utf-8') as f: qss = f.read() app.setStyleSheet(qss) # 设置主题","categories":[],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"}]},{"title":"pyqt5 setWindowTitle 设置窗口标题失效解决办法","slug":"pyqt-set-window-bug","date":"2021-08-30T15:16:45.000Z","updated":"2021-08-30T16:04:02.757Z","comments":true,"path":"2021/08/30/pyqt-set-window-bug/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/pyqt-set-window-bug/","excerpt":"","text":"pyqt5 setWindowTitle 设置窗口标题失效解决办法myMainWindow = QMainWindow() myUi = wMain.Ui_MainWindow() myUi.setupUi(myMainWindow) myMainWindow.setWindowTitle('ZDEMViewer 离散元数值模拟可视化程序') myMainWindow.setWindowIcon(QIcon(\"./icons/logo.ico\")) myMainWindow.show() 如上所示的设置顺序可以成功 如果是： myMainWindow = QMainWindow() myMainWindow.setWindowTitle('ZDEMViewer 离散元数值模拟可视化程序') myMainWindow.setWindowIcon(QIcon(\"./icons/logo.ico\")) myUi = wMain.Ui_MainWindow() myUi.setupUi(myMainWindow) myMainWindow.show() 会出现图标能够生效，但是标题在生效之后一闪而过，变为“MainWindow”","categories":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/categories/PyQt/"}],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"}]},{"title":"pyqtgraph嵌入pyqt界面中 | 修改pyqtgraph背景颜色 | 坐标轴等比例缩放","slug":"pyqt-to-pyqtgraph","date":"2021-08-30T15:16:16.000Z","updated":"2021-08-30T16:04:36.363Z","comments":true,"path":"2021/08/30/pyqt-to-pyqtgraph/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/pyqt-to-pyqtgraph/","excerpt":"","text":"pyqtgraph嵌入pyqt界面中 | 修改pyqtgraph背景颜色 | 坐标轴等比例缩放class pyqtgraph_widget(QWidget): \"\"\"将pyqtgraph嵌入到pyqt界面中 Args: QWidget ([type]): 基于QWidget组件 \"\"\" def __init__(self, parent=None): \"\"\" :param parent: 父组件 \"\"\" QWidget.__init__(self, parent) # 创建垂直布局 self.layout = QtWidgets.QVBoxLayout(self) self.layout.setObjectName('layout') self.layout.setContentsMargins(0,0,0,0) # 修改背景颜色 pg.setConfigOption('background', '#FFFFFF') pg.setConfigOption('foreground', 'k') self.plot_widget = pg.PlotWidget() self.layout.addWidget(self.plot_widget) self.plot_widget.setAspectLocked() # 坐标轴等比例缩放","categories":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/categories/PyQt/"}],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"},{"name":"pyqtgraph","slug":"pyqtgraph","permalink":"https://jlexzhong.github.io/blog/tags/pyqtgraph/"}]},{"title":"pyqt小记|matplotlib嵌入pyqt界面|添加工具条 | matplotlib保存太慢解决方法","slug":"pyqt-to-matplotlib","date":"2021-08-30T15:14:23.000Z","updated":"2021-08-30T16:03:22.303Z","comments":true,"path":"2021/08/30/pyqt-to-matplotlib/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/pyqt-to-matplotlib/","excerpt":"","text":"pyqt小记|matplotlib嵌入pyqt界面|添加工具条 | matplotlib保存太慢解决方法上源码： from PyQt5 import QtWidgets from matplotlib.figure import Figure from matplotlib.backends.backend_qt5 import NavigationToolbar2QT as NavigationToolbar from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg # pyqt5的画布 import io import cv2 import matplotlib import numpy as np from PIL import Image from PyQt5.QtWidgets import QWidget matplotlib.use(\"Qt5Agg\") # 声明使用pyqt5 class MatplotlibFigure(FigureCanvasQTAgg): \"\"\" 创建一个画布类，并把画布放到FigureCanvasQTAgg \"\"\" def __init__(self, parent=None, filePrefix=None): \"\"\" :param parent: :param filePrefix: \"\"\" self.figs = Figure(figsize=(10, 8), dpi=200) super(MatplotlibFigure, self).__init__(self.figs) # 在父类中激活self.fig self.setParent(parent) self.filePrefix = filePrefix self.axes = self.figs.add_subplot(111) self.axes.patch.set_alpha(1) # 设置ax区域背景颜色透明度 # self.figs.canvas.setStyleSheet(\"background-color:transparent;\") FigureCanvasQTAgg.setSizePolicy( self, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding) # 用于告知包含该widget的layout：该widget的size hint已发生变化，layout会自动进行调整。 FigureCanvasQTAgg.updateGeometry(self) def saveFig(self): \"\"\" 保存图片，使用二进制字节流存储，opencv读取。速度优秀 \"\"\" buffer = io.BytesIO() # 字节流对象 self.figs.canvas.print_png(buffer) # 把画布写入字节流 data = buffer.getvalue() buffer.write(data) img = Image.open(buffer) img = np.asarray(img) img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) cv2.imwrite(\"./temp save files/\" + self.filePrefix + \".png\", img) def saveFig2(self): \"\"\" FIXME:需要优化保存图片的速度 \"\"\" self.figs.savefig(\"./temp save files/\" + self.filePrefix + \".jpg\", dpi=144, bbox_inches=\"tight\") class MplWidget(QWidget): \"\"\"Qt控件，用于嵌入matplotlib画布和工具栏 Args: QWidget ([type]): [description] \"\"\" def __init__(self, parent=None, filePrefix=None): \"\"\" :param parent: \"\"\" QWidget.__init__(self, parent) self.qCanvas = MatplotlibFigure(parent, filePrefix) self.mpl_toolbar = NavigationToolbar(self.qCanvas, self) # 创建工具条 # 创建布局，把画布类组件对象和工具条对象添加到QWidget控件中 self.vbl = QtWidgets.QVBoxLayout(self) self.vbl.addWidget(self.qCanvas) self.vbl.addWidget(self.mpl_toolbar)","categories":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/categories/PyQt/"}],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://jlexzhong.github.io/blog/tags/matplotlib/"}]},{"title":"pyqt小记|侧边栏（QListWidget+QStackedWidget）实现","slug":"pyqt-siderbar","date":"2021-08-30T15:13:54.000Z","updated":"2021-08-30T16:04:11.979Z","comments":true,"path":"2021/08/30/pyqt-siderbar/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/pyqt-siderbar/","excerpt":"","text":"pyqt小记|侧边栏（QListWidget+QStackedWidget）实现效果 思路 左边是listwidget，右边是stackedwidget。 点击listwidget的不同item，跳转到stackedwidget不同的页面。 最后通过qss美化。 实现初始化界面def init_leftWidget(self): # self.leftFrame是父组件 self.leftFrame_HLayout = QtWidgets.QHBoxLayout(self.leftFrame) self.leftFrame_HLayout.setSpacing(0) self.leftFrame_HLayout.setContentsMargins(0,0,0,0) self.leftFrame_HLayout.setAlignment(QtCore.Qt.AlignCenter) # 实例化两个组件 self.left_list_widget = QtWidgets.QListWidget(self.leftFrame) self.left_stacked_widget = QtWidgets.QStackedWidget(self.leftFrame) self.left_stacked_widget.setContentsMargins(0,0,0,0) self.leftFrame_HLayout.addWidget(self.left_list_widget) self.leftFrame_HLayout.addWidget(self.left_stacked_widget) self.left_list_widget.setFrameShape(QtWidgets.QListWidget.NoFrame) # 去除边框 self.left_list_widget.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff) # 隐藏垂直滚动条 self.left_list_widget.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)# 隐藏水平滚动条 # 设置字体 font_1 = QtGui.QFont() font_1.setFamily(\"黑体\") font_1.setPointSize(12) font_1.setBold(False) self.left_list_widget.setFont(font_1) # 文件管理 dataView_icon = QtGui.QIcon() dataView_icon.addPixmap(QtGui.QPixmap(\"./icons/dataView.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off) self.dataView_item = QtWidgets.QListWidgetItem(dataView_icon,'文件管理',self.left_list_widget) self.dataView_item.setSizeHint(QSize(30,60)) self.dataView_item.setTextAlignment(QtCore.Qt.AlignCenter) # 数据信息 dataLog_icon = QtGui.QIcon() dataLog_icon.addPixmap(QtGui.QPixmap(\"./icons/dataLog.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off) self.dataLog_item = QtWidgets.QListWidgetItem(dataLog_icon,'数据信息',self.left_list_widget) self.dataLog_item.setSizeHint(QSize(30,60)) self.dataLog_item.setTextAlignment(QtCore.Qt.AlignCenter) # 图像参数 param_icon = QtGui.QIcon() param_icon.addPixmap(QtGui.QPixmap(\"./icons/figureParam.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off) self.param_item = QtWidgets.QListWidgetItem(param_icon,'图像参数',self.left_list_widget) self.param_item.setSizeHint(QSize(30,60)) self.param_item.setTextAlignment(QtCore.Qt.AlignCenter) # 导出 export_icon = QtGui.QIcon() export_icon.addPixmap(QtGui.QPixmap(\"./icons/save.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off) self.export_item = QtWidgets.QListWidgetItem(export_icon,'导出',self.left_list_widget) self.export_item.setSizeHint(QSize(30,60)) self.export_item.setTextAlignment(QtCore.Qt.AlignCenter) self.export_item.whatsThis() # 为listitem添加点击事件，切换stackedwidget页面 self.left_list_widget.itemClicked.connect(self.item_clicked) 点击事件，实现窗口的切换def item_clicked(self): # 获取当前选中的item item = self.left_list_widget.selectedItems()[0] if item.text() == '文件管理': self.switch_dataView() elif (item.text() == '数据信息'): self.switch_dataLog() elif item.text() == '图像参数': self.switch_paramWidget() else: self.switch_export() QSS美化.qss文件： QListWidget, QListView, QTreeWidget, QTreeView { outline: 0px; } QListWidget { min-width: 120px; max-width: 120px; color: Black; background: #F5F5F5; } QListWidget::Item:hover { background: rgb(255, 255, 255); border-left: 5px solid rgb(112, 66, 219); } QListWidget::Item:selected { background: lightGray; border-left: 5px solid rgb(112, 66, 219); } HistoryPanel:hover { background: rgb(52, 52, 52); }","categories":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/categories/PyQt/"}],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"}]},{"title":"pyqy小记|生成gif并嵌入到GUI中","slug":"pyqt-compose-gif-to-gui","date":"2021-08-30T15:13:27.000Z","updated":"2021-08-30T16:03:52.448Z","comments":true,"path":"2021/08/30/pyqt-compose-gif-to-gui/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/pyqt-compose-gif-to-gui/","excerpt":"","text":"pyqy小记|生成gif并嵌入到GUI中生成gif，嵌入到标签QLabel中def compose_gif(self): \"\"\"生成gif \"\"\" jpgPath_List = [] # 读取图片集 jpgList = os.listdir(\"./temp save files\") # 参数是图片集存放的路径，返回该路径下的所有文件名 for jpgName in jpgList: absolutePath = os.path.join(\"./temp save files/\", jpgName) # 拼接成绝对路径 jpgPath_List.append(absolutePath) gif_images = [] # 读取单个图片，将数据存入列表中 for path in jpgPath_List: gif_images.append(imageio.imread(path)) #保存为gif，fps=2 imageio.mimsave(\"./temp save files/test.gif\", gif_images, fps=2) # 实例化QMovie self.gif = QMovie('./temp save files/test.gif') # tabwidget增加一页 gif_tab = QtWidgets.QWidget() gif_tab.setObjectName('gif_tab') self.tabWidget.addTab(gif_tab, 'GIF') gif_verticalLAYOUT = QtWidgets.QVBoxLayout(gif_tab) # gif_verticalLAYOUT.setObjectName('gif_verticalLAYOUT') # 用gifLabel展示gif self.gifLabel = QtWidgets.QLabel(gif_tab) self.gifLabel.setObjectName('gifLabel') gif_verticalLAYOUT.addWidget(self.gifLabel) self.tabWidget.setCurrentWidget(gif_tab) # 设置当前页为gif播放tab # 把gif嵌入到label self.gifLabel.setMovie(self.gif) self.gif.start() self.gifLabel.show() 播放/暂停gifdef pauseGif(self): self.gif.setPaused(True) def playGif(self): self.gif.setPaused(False)","categories":[],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"}]},{"title":"pyqt小记 | 添加右键菜单，添加图标和点击事件","slug":"pyqt-context-menu","date":"2021-08-30T15:12:35.000Z","updated":"2021-08-30T15:50:56.442Z","comments":true,"path":"2021/08/30/pyqt-context-menu/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/pyqt-context-menu/","excerpt":"","text":"pyqt小记 | 添加右键菜单，添加图标和点击事件def contextMenuEvent(self, pos): \"\"\" 右键菜单 :param pos: :return: \"\"\" self.contextMenu = QMenu() self.action_pgPlot = self.contextMenu.addAction( QIcon(\"./icons/logo.ico\"), u'| 使用PyqtGraph绘制散点图') self.action_plotCircle = self.contextMenu.addAction( QIcon(\"./icons/plot.ico\"), u'| 使用matplotlib绘制二维圆图') self.action_plotPoint = self.contextMenu.addAction( QIcon(\"./icons/plotPoint.png\"), u'| 使用matplotlib绘制散点图') self.action_clear_dataView = self.contextMenu.addAction( QIcon(\"./icons/clear.ico\"), u'| 清除数据与图像') self.contextMenu.popup(QCursor.pos()) # 菜单显示的位置 self.action_plotCircle.triggered.connect(self.plotAllSlot_circle) self.action_plotPoint.triggered.connect(self.plotAllSlot_point) self.action_pgPlot.triggered.connect(self.pg_plot) font = QtGui.QFont() font.setFamily(\"黑体\") font.setPointSize(10) font.setBold(True) self.action_pgPlot.setFont(font) self.action_clear_dataView.triggered.connect(self.clear_dataView) self.contextMenu.show() 类继承于QTableView 效果： ![](pyqt-context-menu/右键菜单 2021-08-19 133503.png)","categories":[],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"}]},{"title":"🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结","slug":"tomotoes_blog","date":"2021-08-30T10:09:42.000Z","updated":"2021-08-30T16:06:25.638Z","comments":true,"path":"2021/08/30/tomotoes_blog/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/30/tomotoes_blog/","excerpt":"","text":"🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结主页模板地址：https://github.com/Tomotoes/HomePage 中文使用文档：https://github.com/Tomotoes/HomePage/blob/master/README.zh_CN.md 配置步骤在作者的使用文档中写的以及非常详细了，我总结一下如何自定义。 标题、文字、头像在config.json { \"head\": { \"title\": \"钟军的小黑板\", \"description\": \"Author:Jlex Zhong,Category:Personal Blog\", \"favicon\": \"favicon.ico\" // 暂未找到网站图标的修改方法 }, \"intro\": { \"title\": \"Jlex Zhong\", \"subtitle\": \"Wellcome to my HomePage\", \"enter\": \"enter\", \"supportAuthor\": true, \"background\": true }, \"main\": { \"name\": \"Jlex Zhong\", \"signature\": \"向日葵晚上在干啥呢？\", \"avatar\": { \"link\": \"assets/avatar.jpg\", // 头像，将路径下的图片替换即可 \"height\": \"100\", \"width\": \"100\" }, 增加页面在config.json中 \"ul\": { \"first\": { \"href\": \"blog/\", \"icon\": \"blog\", \"text\": \"Blog\" }, \"second\": { \"href\": \"blog/about/\", \"icon\": \"guanyuwo\", \"text\": \"About Me\" }, \"third\": { \"href\": \"mailto:junzhong0917@163.com\", \"icon\": \"email\", \"text\": \"Email\" }, \"fourth\": { \"href\": \"blog/about/\", //我添加的页面 \"icon\": \"AIRESEARCH\", \"text\": \"AI Lab\" }, \"five\": { \"href\": \"https://github.com/JlexZhong\", \"icon\": \"github\", \"text\": \"Github\" } 在src\\components\\main.pug ul li a(href=`${first.href}` aria-label=`${first.text}`) i(class=`icon icon-${first.icon}`) span(data-translate=`${first.text}`) #{first.text} li a(href=`${second.href}` aria-label=`${second.text}`) i(class=`icon icon-${second.icon}`) span(data-translate=`${second.text}`) #{second.text} li a(href=`${third.href}` aria-label=`${third.text}` target=\"_blank\") i(class=`icon icon-${third.icon}`) span(data-translate=`${third.text}`) #{third.text} li a(href=`${fourth.href}` aria-label=`${fourth.text}` target=\"_blank\") i(class=`icon icon-${fourth.icon}`) span(data-translate=`${fourth.text}`) #{fourth.text} li a(href=`${five.href}` aria-label=`${five.text}` target=\"_blank\") i(class=`icon icon-${five.icon}`) span(data-translate=`${five.text}`) #{five.text} 更换图标 到阿里矢量图标网站中找到自己的图标，并添加到一个项目中。https://www.iconfont.cn/ 把图标调成白色 进入项目设置，把这些勾选上 点击Font Class, 查看在线链接，点击该链接 复制链接中的所有内容，除了以下部分，其余全部替换掉。 .icon { display: block; width: 1.5em; height: 1.5em; margin: 0 auto; fill: currentColor; font-family: 'iconfont' !important; font-size: inherit; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } 最后去config.json中修改图标的名称，不用加icon-。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://jlexzhong.github.io/blog/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jlexzhong.github.io/blog/tags/hexo/"}]},{"title":"我的第一篇博客","slug":"first_blog","date":"2021-08-23T14:42:55.000Z","updated":"2021-08-23T14:48:16.622Z","comments":true,"path":"2021/08/23/first_blog/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/23/first_blog/","excerpt":"","text":"大家好，这是我的第一篇博客，见证了自建个人博客的成功。 接下来，我将在这里发布我的学习记录和问题，以及一些项目，敬请期待！ 本人非科班选手，如有不足还望各位指正哦！","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://jlexzhong.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-23T13:29:17.783Z","updated":"2021-08-30T02:49:05.370Z","comments":true,"path":"2021/08/23/hello-world/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Hexo+Github+matery免费搭建个人博客教程","slug":"build-blog","date":"2021-08-23T04:22:09.000Z","updated":"2021-08-30T14:40:37.000Z","comments":true,"path":"2021/08/23/build-blog/","link":"","permalink":"https://jlexzhong.github.io/blog/2021/08/23/build-blog/","excerpt":"","text":"Hexo+Github+matery免费搭建个人博客详细教程效果图 安装安装Node.js安装Node.js，一直默认。输入：（查看是否安装正确） node -v 添加环境变量： C:\\Program Files\\nodejs\\ 环境变量：C:\\Users\\26780\\AppData\\Roaming\\npm 配置npm查看npm是否安装成功： npm -v 出现BUG： npm install出现一直停留在“fetchMetadata: sill resolveWithNewModule find-cache-dir@“ 解决：更换国内镜像源 更换成淘宝的源 npm config set registry https://registry.npm.taobao.org – 配置后可通过下面方式来验证是否成功 npm config get registry – 或npm info express 安装hexonpm config set registry https://registry.npm.taobao.org npm install -g hexo-cli 若出现warning，这是募捐提示，忽略即可 run `npm fund` for details 如果不想看到，输入命令： npm install --no-fund 安装gitGithub安装，教程网上很多请自行寻找，并配置好SSH-Key Hexo搭建 建立空文件夹，我的是Blog，将来会在这个文件夹内存放与博客有关的内容 打开GIt Bash 或者命令行，输入： hexo init 文件夹内会出现一些配置文件 node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 执行： hexo new hello Hexo //新建一篇名为\"hello Hexo\"的博客 hexo g //生成静态文件 hexo s //本地部署预览 会输出： INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 可能会出现加载不了的情况，因为4000端口太常用了，导致冲突。使用： hexo server -p 5000 //更改端口 hexo常用命令 初始化 npm install hexo -g //安装Hexo npm update hexo -g //升级 hexo init //初始化博客 命令简写 hexo n \"我的博客\" = hexo new \"我的博客\" //新建文章 hexo g = hexo generate //生成 hexo s = hexo server //启动服务预览 hexo d = hexo deploy //部署 其他 hexo server //Hexo会监视文件变动并自动更新，无须重启服务器 hexo server -s //静态模式 hexo server -p 5000 //更改端口 hexo server -i 192.168.1.1 //自定义 IP hexo clean //清除缓存，若是网页正常情况下可以忽略这条命令 推送网站 修改Blog文件夹下的**_config.yml**，在末尾修改成如下格式： # Deployment ## Docs: https://hexo.io/docs/one-command-deployment deploy: type: git repo: https://github.com/JlexZhong/JlexZhong.github.io.git branch: main repo后的地址就是博客仓库的https地址 安装git部署插件： npm install hexo-deployer-git --save 然后输入命令： hexo clean //清理静态文件 hexo g //生成静态文件 hexo d //部署 出现bug： 解决： 如果不是代理问题，在_config.yml文件中把repo：后的地址改为git@github.com:JlexZhong/JlexZhong.github.io.git 是代理问题，清除代理 remote: Permission to JlexZhong/JlexZhong.github.io.git denied to junz2001. fatal: unable to access 'https://github.com/JlexZhong/JlexZhong.github.io.git/': The requested URL returned error: 403 \u001b[41mFATAL\u001b[49m { err: Error: Spawn failed at ChildProcess.&lt;anonymous&gt; (E:\\Blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21) at ChildProcess.emit (events.js:400:28) at ChildProcess.cp.emit (E:\\Blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29) at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) { code: 128 } } Something's wrong. Maybe you can find the solution here: %s \u001b[4mhttps://hexo.io/docs/troubleshooting.html\u001b[24m 此时博客已经上线啦！可以通过网络访问了。浏览器输入博客网站地址xxxx.github.io 修改域名： 现在你的个人网站的地址是yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。 我没有选择购买域名，等后期再来更新吧 发布博客： 先hexo new post \"article title\"新建一篇文章， 在博客文件夹，Blog/source/_posts目录下回多出一个Markdown文件，编写完markdown文件后，保存 根目录下输入hexo g生成静态网页 然后输入hexo s可以本地预览效果 最后输入hexo d上传到github上 _config.yml文件的修改建议： 请修改 _config.yml 的 url 的值为你的网站主 URL（如：http://xxx.github.io）。 建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。 如果你是中文用户，则建议修改 language 的值为 zh-CN。 subtitle选项：在我使用的主题当中即为网页首页中间的字体块，若为空将显示为subtitle post_asset_folder选项设置为：true。当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。 向hexo博客中插入图片 进入博客根目录配置_config.yml:将post_asset_folder: false·改为post_asset_folder: true 安装插件: npm install https://github.com/CodeFalling/hexo-asset-image -- save 此时再执行命令 : hexo n article_name 创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了 添加图片:在想添加的位置写入![](图片名字.图片格式),例如![](1.png) 文章Front-matterFront-matter 是md文件最上方以 ---分隔的区域，用于指定个别文件的变量.Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。 选项详解 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 hide false 隐藏文章，如果hide值为true，则文章不会在首页显示 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。 最简示例--- title: typora-vue-theme主题介绍 date: 2018-09-07 09:25:00 --- 最全示例--- title: typora-vue-theme主题介绍 date: 2018-09-07 09:25:00 author: 赵奇 img: /source/images/xxx.jpg top: true hide: false cover: true coverImg: /images/1.jpg password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 toc: false mathjax: false summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Markdown tags: - Typora - Markdown --- 主题美化 在哪找？ https://hexo.io/themes/ cd 进blog文件夹根目录，输入： git clone 主题http链接 themes/主题名称 主题会下载到themes文件夹下。 我用的是https://github.com/blinkfox/hexo-theme-matery，主题名称是blinkfox，所以输入： git clone https://github.com/blinkfox/hexo-theme-matery themes/blinkfox 在下载的主题文件夹内有使用文档，中英文版本十分友好。 切换主题，找到根目录的_config.yml，将landscape改为blinkfox，也就是改为我们下载的主题名字： # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: landscape 然后再次部署网站，hexo g，hexo d 主题更多个性化我们可以通过修改根目录或者主题目录下的_config.yml，实现更多的个性化。当然，不同的主题的语法还有不同，修改方法请参考各主题的使用文档。例如： 代码高亮 从 Hexo5.0 版本开始自带了 prismjs 代码语法高亮的支持，本主题对此进行了改造支持。 如果你的博客中曾经安装过 hexo-prism-plugin 的插件，那么你须要执行 npm uninstall hexo-prism-plugin 来卸载掉它，否则生成的代码中会有 &amp;#123; 和 &amp;#125; 的转义字符。 然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并将 prismjs.enable 的值设置为 true，主要配置如下： highlight: enable: false line_number: true auto_detect: false tab_replace: '' wrap: true hljs: false prismjs: enable: true preprocess: true line_number: true tab_replace: '' 文章字数统计插件（建议安装） 如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。 安装命令如下： npm i --save hexo-wordcount 然后只需在本主题下的 _config.yml 文件中，将各个文章字数相关的配置激活即可： postInfo: date: true update: false wordCount: false # 设置文章字数统计为 true. totalCount: false # 设置站点文章总字数统计为 true. min2read: false # 阅读时长. readCount: false # 阅读次数. 更多请查看主题使用文档 Github &amp; Coding Pages 双部署后续更新 参考https://reclusew.github.io/2021/08/12/blog-setup/ https://sunhwee.com/posts/6e8839eb.html#toc-heading-65 https://blog.csdn.net/weixin_42334475/article/details/101055364?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control https://blog.csdn.net/Fitz1318/article/details/86548129?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162977080816780269848140%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=162977080816780269848140&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-86548129.pc_search_result_control_group&amp;utm_term=hexo+%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87&amp;spm=1018.2226.3001.4187 总结看到这里，相信您已经搭建出自己的个人博客网站了！","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://jlexzhong.github.io/blog/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"搭建博客","slug":"搭建博客","permalink":"https://jlexzhong.github.io/blog/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"https://jlexzhong.github.io/blog/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://jlexzhong.github.io/blog/tags/github/"},{"name":"matery","slug":"matery","permalink":"https://jlexzhong.github.io/blog/tags/matery/"}]}],"categories":[{"name":"python","slug":"python","permalink":"https://jlexzhong.github.io/blog/categories/python/"},{"name":"Tensorflow","slug":"Tensorflow","permalink":"https://jlexzhong.github.io/blog/categories/Tensorflow/"},{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/categories/PyQt/"},{"name":"hexo","slug":"hexo","permalink":"https://jlexzhong.github.io/blog/categories/hexo/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://jlexzhong.github.io/blog/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"python","slug":"python","permalink":"https://jlexzhong.github.io/blog/tags/python/"},{"name":"算法","slug":"算法","permalink":"https://jlexzhong.github.io/blog/tags/%E7%AE%97%E6%B3%95/"},{"name":"tensorflow","slug":"tensorflow","permalink":"https://jlexzhong.github.io/blog/tags/tensorflow/"},{"name":"深度学习","slug":"深度学习","permalink":"https://jlexzhong.github.io/blog/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"PyQt","slug":"PyQt","permalink":"https://jlexzhong.github.io/blog/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"https://jlexzhong.github.io/blog/tags/GUI/"},{"name":"pyqtgraph","slug":"pyqtgraph","permalink":"https://jlexzhong.github.io/blog/tags/pyqtgraph/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://jlexzhong.github.io/blog/tags/matplotlib/"},{"name":"hexo","slug":"hexo","permalink":"https://jlexzhong.github.io/blog/tags/hexo/"},{"name":"生活","slug":"生活","permalink":"https://jlexzhong.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"},{"name":"搭建博客","slug":"搭建博客","permalink":"https://jlexzhong.github.io/blog/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"},{"name":"github","slug":"github","permalink":"https://jlexzhong.github.io/blog/tags/github/"},{"name":"matery","slug":"matery","permalink":"https://jlexzhong.github.io/blog/tags/matery/"}]}