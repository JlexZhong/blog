<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钟军的小黑板</title>
  
  <subtitle>书山有路勤为径，学海无涯苦作舟</subtitle>
  <link href="https://jlexzhong.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://jlexzhong.github.io/blog/"/>
  <updated>2021-08-30T16:05:06.208Z</updated>
  <id>https://jlexzhong.github.io/blog/</id>
  
  <author>
    <name>钟军</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python批量删除含有指定字符的文件或文件夹</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/python-delete-files-in-batches/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/python-delete-files-in-batches/</id>
    <published>2021-08-30T15:18:38.000Z</published>
    <updated>2021-08-30T16:05:06.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python批量删除含有指定字符的文件或文件夹"><a href="#Python批量删除含有指定字符的文件或文件夹" class="headerlink" title="Python批量删除含有指定字符的文件或文件夹"></a>Python批量删除含有指定字符的文件或文件夹</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding: UTF-8</span><span class="token keyword">import</span> os<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathp <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">r'./test/erli'</span><span class="token punctuation">)</span><span class="token comment"># 这里不得不感慨，Python的库，几乎满足你所有需要，看，连这个递归查找过滤都有了！</span><span class="token comment"># 实现思路：递归遍历文件夹中的文件，如果文件名包含"(-)"，就删掉，下面是代码：</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>rglob<span class="token punctuation">(</span><span class="token string">'*(-)*'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">#这里判断下，如果是文件夹就先不删</span>        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><p><a href="https://www.jianshu.com/p/17ae57c19d1d">https://www.jianshu.com/p/17ae57c19d1d</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python批量删除含有指定字符的文件或文件夹&quot;&gt;&lt;a href=&quot;#Python批量删除含有指定字符的文件或文件夹&quot; class=&quot;headerlink&quot; title=&quot;Python批量删除含有指定字符的文件或文件夹&quot;&gt;&lt;/a&gt;Python批量删除含有指定字符的</summary>
      
    
    
    
    <category term="python" scheme="https://jlexzhong.github.io/blog/categories/python/"/>
    
    
    <category term="python" scheme="https://jlexzhong.github.io/blog/tags/python/"/>
    
    <category term="算法" scheme="https://jlexzhong.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow2 模型的保存和载入 h5和ckpt的用法 | 小记</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/tensorflow-load-and-save/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/tensorflow-load-and-save/</id>
    <published>2021-08-30T15:17:40.000Z</published>
    <updated>2021-08-30T16:06:18.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow2-模型的保存和载入-h5和ckpt的用法-小记"><a href="#tensorflow2-模型的保存和载入-h5和ckpt的用法-小记" class="headerlink" title="tensorflow2 模型的保存和载入 h5和ckpt的用法 | 小记"></a>tensorflow2 模型的保存和载入 h5和ckpt的用法 | 小记</h1><h2 id="断点续训-检查点"><a href="#断点续训-检查点" class="headerlink" title="断点续训/检查点"></a>断点续训/检查点</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 断点续训</span>checkpoint_path <span class="token operator">=</span> <span class="token string">'ckpt/transfer_{epoch:02d}-{val_acc:.2f}.ckpt'</span>  <span class="token comment"># 格式化字符，防止文件名冲突</span>checkpoint_callback <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>ModelCheckpoint<span class="token punctuation">(</span>checkpoint_path<span class="token punctuation">,</span>  <span class="token comment"># 保存路径</span>                                monitor<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">,</span>  <span class="token comment"># 监测指标，这里是测试集的acc</span>                                save_weights_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment">#是否只保存权重</span>                                mode<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>                                period<span class="token operator">=</span><span class="token number">1</span>  <span class="token comment"># 每period个周期保存一次</span>                                <span class="token punctuation">)</span><span class="token comment"># 需要在fit/fit_generator()中添加该回调函数</span>history_ft <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>                                        train_generator<span class="token punctuation">,</span>                                        steps_per_epoch<span class="token operator">=</span>steps_per_epoch<span class="token punctuation">,</span>                                        epochs<span class="token operator">=</span>epochs<span class="token punctuation">,</span>                                        validation_data<span class="token operator">=</span>validation_generator<span class="token punctuation">,</span>                                        validation_steps<span class="token operator">=</span>validation_steps<span class="token punctuation">,</span>                                        callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>checkpoint_callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存全部模型（ckpt）："><a href="#保存全部模型（ckpt）：" class="headerlink" title="保存全部模型（ckpt）："></a><strong>保存全部模型</strong>（ckpt）：</h3><p>读取方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">'./ckpt/transfer_03-0.98.ckpt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="保存全部模型（h5）"><a href="#保存全部模型（h5）" class="headerlink" title="保存全部模型（h5）:"></a>保存全部模型（h5）:</h3><p>读取方法:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> load_model<span class="token punctuation">(</span><span class="token string">'./ckpt/transfer_06-0.94.h5'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="仅保存权重（ckpt）："><a href="#仅保存权重（ckpt）：" class="headerlink" title="仅保存权重（ckpt）："></a><strong>仅保存权重（ckpt）</strong>：</h3><p>读取方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">checkpoint_path <span class="token operator">=</span> <span class="token string">'ckpt/transfer_{epoch:02d}-{val_acc:.2f}.ckpt'</span>checkpoint_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>checkpoint_path<span class="token punctuation">)</span>latest_model <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>latest_checkpoint<span class="token punctuation">(</span>checkpoint_dir<span class="token punctuation">)</span>  <span class="token comment"># 找到最新保存的断点</span>model<span class="token punctuation">.</span>load_weights<span class="token punctuation">(</span>latest_model<span class="token punctuation">)</span>  <span class="token comment"># 读取权重，model的结构必须与训练的网络结构一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="仅保存权重（h5）"><a href="#仅保存权重（h5）" class="headerlink" title="仅保存权重（h5）"></a>仅保存权重（h5）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span>load_weights<span class="token punctuation">(</span><span class="token string">'./ckpt/transfer_18-0.97.h5'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>tf.train.latest_checkpoint()</strong> 方法用于找到目录下<strong>最新</strong>的检查点</p><p>并且似乎<strong>只对ckpt有作用</strong></p><h2 id="model-save-保存模型"><a href="#model-save-保存模型" class="headerlink" title="model.save()保存模型"></a>model.save()保存模型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">path_save_model <span class="token operator">=</span> <span class="token string">'model/my_saved_InceptionV3_model.h5'</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path_save_model<span class="token punctuation">,</span> overwrite<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">tensorflow2 模型的保存和载入 h5和ckpt的用法</summary>
    
    
    
    <category term="Tensorflow" scheme="https://jlexzhong.github.io/blog/categories/Tensorflow/"/>
    
    
    <category term="tensorflow" scheme="https://jlexzhong.github.io/blog/tags/tensorflow/"/>
    
    <category term="深度学习" scheme="https://jlexzhong.github.io/blog/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>pyqt5小记| QSS开源暗黑主题qdarkstyle ，读取QSS主题文件</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/pyqt-qss-qdarkstyle/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/pyqt-qss-qdarkstyle/</id>
    <published>2021-08-30T15:17:11.000Z</published>
    <updated>2021-08-30T15:50:56.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqt5小记-QSS开源暗黑主题qdarkstyle-，读取QSS主题文件"><a href="#pyqt5小记-QSS开源暗黑主题qdarkstyle-，读取QSS主题文件" class="headerlink" title="pyqt5小记| QSS开源暗黑主题qdarkstyle ，读取QSS主题文件"></a>pyqt5小记| QSS开源暗黑主题qdarkstyle ，读取QSS主题文件</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">Pip install qdarkstyle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QIcon<span class="token keyword">import</span> qdarkstyle<span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span>  QMainWindow<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AA_EnableHighDpiScaling<span class="token punctuation">)</span>  <span class="token comment"># 适应高分辨率</span>    <span class="token comment"># qdarkstyle</span>    <span class="token comment"># 设置qdarkstyle！！！</span>    app<span class="token punctuation">.</span>setStyleSheet<span class="token punctuation">(</span>qdarkstyle<span class="token punctuation">.</span>load_stylesheet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#</span>myMainWindow <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    myUi <span class="token operator">=</span> wMain<span class="token punctuation">.</span>Ui_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    myUi<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>myMainWindow<span class="token punctuation">)</span>    myMainWindow<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'ZDEMViewer    离散元数值模拟可视化程序'</span><span class="token punctuation">)</span>    myMainWindow<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"./icons/logo.ico"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    myMainWindow<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>![](pyqt-qss-qdarkstyle/暗黑主题 2021-08-19 113230.png)</p><h2 id="如何读取QSS文件作为GUI主题"><a href="#如何读取QSS文件作为GUI主题" class="headerlink" title="如何读取QSS文件作为GUI主题"></a>如何读取QSS文件作为GUI主题</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./QSS/myQSS.qss'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>qss <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>setStyleSheet<span class="token punctuation">(</span>qss<span class="token punctuation">)</span>  <span class="token comment"># 设置主题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyqt5小记-QSS开源暗黑主题qdarkstyle-，读取QSS主题文件&quot;&gt;&lt;a href=&quot;#pyqt5小记-QSS开源暗黑主题qdarkstyle-，读取QSS主题文件&quot; class=&quot;headerlink&quot; title=&quot;pyqt5小记| QSS开源暗黑</summary>
      
    
    
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/tags/PyQt/"/>
    
    <category term="GUI" scheme="https://jlexzhong.github.io/blog/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>pyqt5 setWindowTitle 设置窗口标题失效解决办法</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/pyqt-set-window-bug/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/pyqt-set-window-bug/</id>
    <published>2021-08-30T15:16:45.000Z</published>
    <updated>2021-08-30T16:04:02.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqt5-setWindowTitle-设置窗口标题失效解决办法"><a href="#pyqt5-setWindowTitle-设置窗口标题失效解决办法" class="headerlink" title="pyqt5 setWindowTitle 设置窗口标题失效解决办法"></a>pyqt5 setWindowTitle 设置窗口标题失效解决办法</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">myMainWindow <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>myUi <span class="token operator">=</span> wMain<span class="token punctuation">.</span>Ui_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>myUi<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>myMainWindow<span class="token punctuation">)</span>myMainWindow<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'ZDEMViewer    离散元数值模拟可视化程序'</span><span class="token punctuation">)</span>myMainWindow<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"./icons/logo.ico"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myMainWindow<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示的设置顺序可以成功</p><p>如果是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myMainWindow <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>myMainWindow<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'ZDEMViewer    离散元数值模拟可视化程序'</span><span class="token punctuation">)</span>myMainWindow<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"./icons/logo.ico"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myUi <span class="token operator">=</span> wMain<span class="token punctuation">.</span>Ui_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>myUi<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>myMainWindow<span class="token punctuation">)</span>myMainWindow<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会出现<strong>图标能够生效</strong>，但是标题在生效之后一闪而过，变为“MainWindow”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyqt5-setWindowTitle-设置窗口标题失效解决办法&quot;&gt;&lt;a href=&quot;#pyqt5-setWindowTitle-设置窗口标题失效解决办法&quot; class=&quot;headerlink&quot; title=&quot;pyqt5 setWindowTitle 设置窗口标</summary>
      
    
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/categories/PyQt/"/>
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/tags/PyQt/"/>
    
    <category term="GUI" scheme="https://jlexzhong.github.io/blog/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>pyqtgraph嵌入pyqt界面中 | 修改pyqtgraph背景颜色 | 坐标轴等比例缩放</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/pyqt-to-pyqtgraph/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/pyqt-to-pyqtgraph/</id>
    <published>2021-08-30T15:16:16.000Z</published>
    <updated>2021-08-30T16:04:36.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqtgraph嵌入pyqt界面中-修改pyqtgraph背景颜色-坐标轴等比例缩放"><a href="#pyqtgraph嵌入pyqt界面中-修改pyqtgraph背景颜色-坐标轴等比例缩放" class="headerlink" title="pyqtgraph嵌入pyqt界面中 | 修改pyqtgraph背景颜色 | 坐标轴等比例缩放"></a>pyqtgraph嵌入pyqt界面中 | 修改pyqtgraph背景颜色 | 坐标轴等比例缩放</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">pyqtgraph_widget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将pyqtgraph嵌入到pyqt界面中    Args:        QWidget ([type]): 基于QWidget组件    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param parent: 父组件        """</span>               QWidget<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>        <span class="token comment"># 创建垂直布局</span>        self<span class="token punctuation">.</span>layout <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">'layout'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>setContentsMargins<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># 修改背景颜色</span>        pg<span class="token punctuation">.</span>setConfigOption<span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span> <span class="token string">'#FFFFFF'</span><span class="token punctuation">)</span>        pg<span class="token punctuation">.</span>setConfigOption<span class="token punctuation">(</span><span class="token string">'foreground'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>plot_widget <span class="token operator">=</span> pg<span class="token punctuation">.</span>PlotWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>plot_widget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>plot_widget<span class="token punctuation">.</span>setAspectLocked<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 坐标轴等比例缩放</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyqtgraph嵌入pyqt界面中-修改pyqtgraph背景颜色-坐标轴等比例缩放&quot;&gt;&lt;a href=&quot;#pyqtgraph嵌入pyqt界面中-修改pyqtgraph背景颜色-坐标轴等比例缩放&quot; class=&quot;headerlink&quot; title=&quot;pyqtgr</summary>
      
    
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/categories/PyQt/"/>
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/tags/PyQt/"/>
    
    <category term="GUI" scheme="https://jlexzhong.github.io/blog/tags/GUI/"/>
    
    <category term="pyqtgraph" scheme="https://jlexzhong.github.io/blog/tags/pyqtgraph/"/>
    
  </entry>
  
  <entry>
    <title>pyqt小记|matplotlib嵌入pyqt界面|添加工具条 | matplotlib保存太慢解决方法</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/pyqt-to-matplotlib/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/pyqt-to-matplotlib/</id>
    <published>2021-08-30T15:14:23.000Z</published>
    <updated>2021-08-30T16:03:22.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqt小记-matplotlib嵌入pyqt界面-添加工具条-matplotlib保存太慢解决方法"><a href="#pyqt小记-matplotlib嵌入pyqt界面-添加工具条-matplotlib保存太慢解决方法" class="headerlink" title="pyqt小记|matplotlib嵌入pyqt界面|添加工具条 | matplotlib保存太慢解决方法"></a>pyqt小记|matplotlib嵌入pyqt界面|添加工具条 | matplotlib保存太慢解决方法</h1><p>上源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtWidgets<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>figure <span class="token keyword">import</span> Figure<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>backend_qt5 <span class="token keyword">import</span> NavigationToolbar2QT <span class="token keyword">as</span> NavigationToolbar<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>backend_qt5agg <span class="token keyword">import</span> FigureCanvasQTAgg  <span class="token comment"># pyqt5的画布</span><span class="token keyword">import</span> io<span class="token keyword">import</span> cv2<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidgetmatplotlib<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"Qt5Agg"</span><span class="token punctuation">)</span>  <span class="token comment"># 声明使用pyqt5</span><span class="token keyword">class</span> <span class="token class-name">MatplotlibFigure</span><span class="token punctuation">(</span>FigureCanvasQTAgg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    创建一个画布类，并把画布放到FigureCanvasQTAgg    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> filePrefix<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""                :param parent:        :param filePrefix:        """</span>        self<span class="token punctuation">.</span>figs <span class="token operator">=</span> Figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MatplotlibFigure<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>figs<span class="token punctuation">)</span>  <span class="token comment"># 在父类中激活self.fig</span>        self<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>filePrefix <span class="token operator">=</span> filePrefix        self<span class="token punctuation">.</span>axes <span class="token operator">=</span> self<span class="token punctuation">.</span>figs<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>patch<span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 设置ax区域背景颜色透明度</span>        <span class="token comment"># self.figs.canvas.setStyleSheet("background-color:transparent;")</span>        FigureCanvasQTAgg<span class="token punctuation">.</span>setSizePolicy<span class="token punctuation">(</span>            self<span class="token punctuation">,</span> QtWidgets<span class="token punctuation">.</span>QSizePolicy<span class="token punctuation">.</span>Expanding<span class="token punctuation">,</span> QtWidgets<span class="token punctuation">.</span>QSizePolicy<span class="token punctuation">.</span>Expanding<span class="token punctuation">)</span>        <span class="token comment"># 用于告知包含该widget的layout：该widget的size hint已发生变化，layout会自动进行调整。</span>        FigureCanvasQTAgg<span class="token punctuation">.</span>updateGeometry<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">saveFig</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        保存图片，使用二进制字节流存储，opencv读取。速度优秀        """</span>        <span class="token builtin">buffer</span> <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 字节流对象</span>        self<span class="token punctuation">.</span>figs<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>print_png<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span>  <span class="token comment"># 把画布写入字节流</span>        data <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">buffer</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"./temp save files/"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>filePrefix <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">saveFig2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        FIXME:需要优化保存图片的速度        """</span>        self<span class="token punctuation">.</span>figs<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"./temp save files/"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>filePrefix <span class="token operator">+</span>                          <span class="token string">".jpg"</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">144</span><span class="token punctuation">,</span> bbox_inches<span class="token operator">=</span><span class="token string">"tight"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MplWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Qt控件，用于嵌入matplotlib画布和工具栏    Args:        QWidget ([type]): [description]    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> filePrefix<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param parent:        """</span>               QWidget<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qCanvas <span class="token operator">=</span> MatplotlibFigure<span class="token punctuation">(</span>parent<span class="token punctuation">,</span> filePrefix<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mpl_toolbar <span class="token operator">=</span> NavigationToolbar<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qCanvas<span class="token punctuation">,</span> self<span class="token punctuation">)</span>  <span class="token comment"># 创建工具条</span>        <span class="token comment"># 创建布局，把画布类组件对象和工具条对象添加到QWidget控件中</span>        self<span class="token punctuation">.</span>vbl <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>vbl<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>qCanvas<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>vbl<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mpl_toolbar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">pyqt小记</summary>
    
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/categories/PyQt/"/>
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/tags/PyQt/"/>
    
    <category term="GUI" scheme="https://jlexzhong.github.io/blog/tags/GUI/"/>
    
    <category term="matplotlib" scheme="https://jlexzhong.github.io/blog/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>pyqt小记|侧边栏（QListWidget+QStackedWidget）实现</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/pyqt-siderbar/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/pyqt-siderbar/</id>
    <published>2021-08-30T15:13:54.000Z</published>
    <updated>2021-08-30T16:04:11.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqt小记-侧边栏（QListWidget-QStackedWidget）实现"><a href="#pyqt小记-侧边栏（QListWidget-QStackedWidget）实现" class="headerlink" title="pyqt小记|侧边栏（QListWidget+QStackedWidget）实现"></a>pyqt小记|侧边栏（QListWidget+QStackedWidget）实现</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/blog/blog/2021/08/30/pyqt-siderbar/侧边栏2021-08-19 125724.png" alt="img" style="zoom:67%;"><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>左边是<strong>listwidget</strong>，右边是<strong>stackedwidget</strong>。</li><li>点击listwidget的不同item，跳转到stackedwidget不同的页面。</li><li>最后通过<strong>qss美化</strong>。</li></ul><p><img src="/blog/blog/2021/08/30/pyqt-siderbar/%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%BB%93%E6%9E%84.png" alt="img"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="初始化界面"><a href="#初始化界面" class="headerlink" title="初始化界面"></a>初始化界面</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_leftWidget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># self.leftFrame是父组件</span>    self<span class="token punctuation">.</span>leftFrame_HLayout <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QHBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>leftFrame<span class="token punctuation">)</span>   self<span class="token punctuation">.</span>leftFrame_HLayout<span class="token punctuation">.</span>setSpacing<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>leftFrame_HLayout<span class="token punctuation">.</span>setContentsMargins<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>   self<span class="token punctuation">.</span>leftFrame_HLayout<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>      <span class="token comment"># 实例化两个组件</span>   self<span class="token punctuation">.</span>left_list_widget <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QListWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>leftFrame<span class="token punctuation">)</span>   self<span class="token punctuation">.</span>left_stacked_widget <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QStackedWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>leftFrame<span class="token punctuation">)</span>   self<span class="token punctuation">.</span>left_stacked_widget<span class="token punctuation">.</span>setContentsMargins<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>   self<span class="token punctuation">.</span>leftFrame_HLayout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">)</span>   self<span class="token punctuation">.</span>leftFrame_HLayout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>left_stacked_widget<span class="token punctuation">)</span>                 self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">.</span>setFrameShape<span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QListWidget<span class="token punctuation">.</span>NoFrame<span class="token punctuation">)</span> <span class="token comment"># 去除边框</span>    self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">.</span>setVerticalScrollBarPolicy<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>ScrollBarPolicy<span class="token punctuation">.</span>ScrollBarAlwaysOff<span class="token punctuation">)</span>  <span class="token comment"># 隐藏垂直滚动条</span>    self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">.</span>setHorizontalScrollBarPolicy<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>ScrollBarPolicy<span class="token punctuation">.</span>ScrollBarAlwaysOff<span class="token punctuation">)</span><span class="token comment"># 隐藏水平滚动条</span>    <span class="token comment"># 设置字体</span>    font_1 <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token punctuation">)</span>    font_1<span class="token punctuation">.</span>setFamily<span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">)</span>    font_1<span class="token punctuation">.</span>setPointSize<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    font_1<span class="token punctuation">.</span>setBold<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>font_1<span class="token punctuation">)</span>    <span class="token comment"># 文件管理</span>    dataView_icon <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">(</span><span class="token punctuation">)</span>    dataView_icon<span class="token punctuation">.</span>addPixmap<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QPixmap<span class="token punctuation">(</span><span class="token string">"./icons/dataView.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Normal<span class="token punctuation">,</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Off<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dataView_item <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QListWidgetItem<span class="token punctuation">(</span>dataView_icon<span class="token punctuation">,</span><span class="token string">'文件管理'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dataView_item<span class="token punctuation">.</span>setSizeHint<span class="token punctuation">(</span>QSize<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dataView_item<span class="token punctuation">.</span>setTextAlignment<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    <span class="token comment"># 数据信息</span>    dataLog_icon <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">(</span><span class="token punctuation">)</span>    dataLog_icon<span class="token punctuation">.</span>addPixmap<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QPixmap<span class="token punctuation">(</span><span class="token string">"./icons/dataLog.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Normal<span class="token punctuation">,</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Off<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dataLog_item <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QListWidgetItem<span class="token punctuation">(</span>dataLog_icon<span class="token punctuation">,</span><span class="token string">'数据信息'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dataLog_item<span class="token punctuation">.</span>setSizeHint<span class="token punctuation">(</span>QSize<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dataLog_item<span class="token punctuation">.</span>setTextAlignment<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    <span class="token comment"># 图像参数</span>    param_icon <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">(</span><span class="token punctuation">)</span>    param_icon<span class="token punctuation">.</span>addPixmap<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QPixmap<span class="token punctuation">(</span><span class="token string">"./icons/figureParam.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Normal<span class="token punctuation">,</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Off<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>param_item <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QListWidgetItem<span class="token punctuation">(</span>param_icon<span class="token punctuation">,</span><span class="token string">'图像参数'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>param_item<span class="token punctuation">.</span>setSizeHint<span class="token punctuation">(</span>QSize<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>param_item<span class="token punctuation">.</span>setTextAlignment<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    <span class="token comment"># 导出</span>    export_icon <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">(</span><span class="token punctuation">)</span>    export_icon<span class="token punctuation">.</span>addPixmap<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QPixmap<span class="token punctuation">(</span><span class="token string">"./icons/save.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Normal<span class="token punctuation">,</span> QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">.</span>Off<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>export_item <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QListWidgetItem<span class="token punctuation">(</span>export_icon<span class="token punctuation">,</span><span class="token string">'导出'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>export_item<span class="token punctuation">.</span>setSizeHint<span class="token punctuation">(</span>QSize<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>export_item<span class="token punctuation">.</span>setTextAlignment<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>export_item<span class="token punctuation">.</span>whatsThis<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 为listitem添加点击事件，切换stackedwidget页面</span>    self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">.</span>itemClicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>item_clicked<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="点击事件，实现窗口的切换"><a href="#点击事件，实现窗口的切换" class="headerlink" title="点击事件，实现窗口的切换"></a>点击事件，实现窗口的切换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">item_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取当前选中的item</span>    item <span class="token operator">=</span> self<span class="token punctuation">.</span>left_list_widget<span class="token punctuation">.</span>selectedItems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> item<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'文件管理'</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>switch_dataView<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'数据信息'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>switch_dataLog<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> item<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'图像参数'</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>switch_paramWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>switch_export<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="QSS美化"><a href="#QSS美化" class="headerlink" title="QSS美化"></a>QSS美化</h3><p>.qss文件：</p><pre class="line-numbers language-none"><code class="language-none">QListWidget, QListView, QTreeWidget, QTreeView {    outline: 0px;}QListWidget {    min-width: 120px;    max-width: 120px;    color: Black;    background: #F5F5F5;}QListWidget::Item:hover {background: rgb(255, 255, 255);    border-left: 5px solid rgb(112, 66, 219);}QListWidget::Item:selected {    background: lightGray;    border-left: 5px solid rgb(112, 66, 219);}HistoryPanel:hover {    background: rgb(52, 52, 52);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyqt小记-侧边栏（QListWidget-QStackedWidget）实现&quot;&gt;&lt;a href=&quot;#pyqt小记-侧边栏（QListWidget-QStackedWidget）实现&quot; class=&quot;headerlink&quot; title=&quot;pyqt小记|侧边栏（Q</summary>
      
    
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/categories/PyQt/"/>
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/tags/PyQt/"/>
    
    <category term="GUI" scheme="https://jlexzhong.github.io/blog/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>pyqy小记|生成gif并嵌入到GUI中</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/pyqt-compose-gif-to-gui/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/pyqt-compose-gif-to-gui/</id>
    <published>2021-08-30T15:13:27.000Z</published>
    <updated>2021-08-30T16:03:52.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqy小记-生成gif并嵌入到GUI中"><a href="#pyqy小记-生成gif并嵌入到GUI中" class="headerlink" title="pyqy小记|生成gif并嵌入到GUI中"></a>pyqy小记|生成gif并嵌入到GUI中</h1><h2 id="生成gif，嵌入到标签QLabel中"><a href="#生成gif，嵌入到标签QLabel中" class="headerlink" title="生成gif，嵌入到标签QLabel中"></a>生成gif，嵌入到标签QLabel中</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compose_gif</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""生成gif """</span>    jpgPath_List <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 读取图片集</span>    jpgList <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"./temp save files"</span><span class="token punctuation">)</span>  <span class="token comment"># 参数是图片集存放的路径，返回该路径下的所有文件名</span>    <span class="token keyword">for</span> jpgName <span class="token keyword">in</span> jpgList<span class="token punctuation">:</span>        absolutePath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"./temp save files/"</span><span class="token punctuation">,</span> jpgName<span class="token punctuation">)</span>  <span class="token comment"># 拼接成绝对路径</span>        jpgPath_List<span class="token punctuation">.</span>append<span class="token punctuation">(</span>absolutePath<span class="token punctuation">)</span>    gif_images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 读取单个图片，将数据存入列表中</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> jpgPath_List<span class="token punctuation">:</span>        gif_images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imageio<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#保存为gif，fps=2</span>    imageio<span class="token punctuation">.</span>mimsave<span class="token punctuation">(</span><span class="token string">"./temp save files/test.gif"</span><span class="token punctuation">,</span> gif_images<span class="token punctuation">,</span> fps<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># 实例化QMovie</span>    self<span class="token punctuation">.</span>gif <span class="token operator">=</span> QMovie<span class="token punctuation">(</span><span class="token string">'./temp save files/test.gif'</span><span class="token punctuation">)</span>    <span class="token comment"># tabwidget增加一页</span>    gif_tab <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    gif_tab<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">'gif_tab'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>tabWidget<span class="token punctuation">.</span>addTab<span class="token punctuation">(</span>gif_tab<span class="token punctuation">,</span> <span class="token string">'GIF'</span><span class="token punctuation">)</span>    gif_verticalLAYOUT <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span>gif_tab<span class="token punctuation">)</span>    <span class="token comment"># </span>    gif_verticalLAYOUT<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">'gif_verticalLAYOUT'</span><span class="token punctuation">)</span>    <span class="token comment"># 用gifLabel展示gif</span>    self<span class="token punctuation">.</span>gifLabel <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>gif_tab<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>gifLabel<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">'gifLabel'</span><span class="token punctuation">)</span>    gif_verticalLAYOUT<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>gifLabel<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>tabWidget<span class="token punctuation">.</span>setCurrentWidget<span class="token punctuation">(</span>gif_tab<span class="token punctuation">)</span>  <span class="token comment"># 设置当前页为gif播放tab</span>    <span class="token comment"># 把gif嵌入到label</span>    self<span class="token punctuation">.</span>gifLabel<span class="token punctuation">.</span>setMovie<span class="token punctuation">(</span>self<span class="token punctuation">.</span>gif<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>gif<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>gifLabel<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="播放-暂停gif"><a href="#播放-暂停gif" class="headerlink" title="播放/暂停gif"></a>播放/暂停gif</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pauseGif</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>gif<span class="token punctuation">.</span>setPaused<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">playGif</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>gif<span class="token punctuation">.</span>setPaused<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyqy小记-生成gif并嵌入到GUI中&quot;&gt;&lt;a href=&quot;#pyqy小记-生成gif并嵌入到GUI中&quot; class=&quot;headerlink&quot; title=&quot;pyqy小记|生成gif并嵌入到GUI中&quot;&gt;&lt;/a&gt;pyqy小记|生成gif并嵌入到GUI中&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/tags/PyQt/"/>
    
    <category term="GUI" scheme="https://jlexzhong.github.io/blog/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>pyqt小记 | 添加右键菜单，添加图标和点击事件</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/pyqt-context-menu/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/pyqt-context-menu/</id>
    <published>2021-08-30T15:12:35.000Z</published>
    <updated>2021-08-30T15:50:56.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqt小记-添加右键菜单，添加图标和点击事件"><a href="#pyqt小记-添加右键菜单，添加图标和点击事件" class="headerlink" title="pyqt小记 | 添加右键菜单，添加图标和点击事件"></a>pyqt小记 | 添加右键菜单，添加图标和点击事件</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">contextMenuEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    右键菜单    :param pos:    :return:    """</span>    self<span class="token punctuation">.</span>contextMenu <span class="token operator">=</span> QMenu<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_pgPlot <span class="token operator">=</span> self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>        QIcon<span class="token punctuation">(</span><span class="token string">"./icons/logo.ico"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">u'| 使用PyqtGraph绘制散点图'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_plotCircle <span class="token operator">=</span> self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>        QIcon<span class="token punctuation">(</span><span class="token string">"./icons/plot.ico"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">u'| 使用matplotlib绘制二维圆图'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_plotPoint <span class="token operator">=</span> self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>        QIcon<span class="token punctuation">(</span><span class="token string">"./icons/plotPoint.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">u'| 使用matplotlib绘制散点图'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_clear_dataView <span class="token operator">=</span> self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>        QIcon<span class="token punctuation">(</span><span class="token string">"./icons/clear.ico"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">u'| 清除数据与图像'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>popup<span class="token punctuation">(</span>QCursor<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 菜单显示的位置</span>    self<span class="token punctuation">.</span>action_plotCircle<span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>plotAllSlot_circle<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_plotPoint<span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>plotAllSlot_point<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_pgPlot<span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pg_plot<span class="token punctuation">)</span>    font <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token punctuation">)</span>    font<span class="token punctuation">.</span>setFamily<span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">)</span>    font<span class="token punctuation">.</span>setPointSize<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    font<span class="token punctuation">.</span>setBold<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_pgPlot<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>font<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>action_clear_dataView<span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>clear_dataView<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类继承于QTableView</p><p><strong>效果：</strong></p><p>![](pyqt-context-menu/右键菜单 2021-08-19 133503.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyqt小记-添加右键菜单，添加图标和点击事件&quot;&gt;&lt;a href=&quot;#pyqt小记-添加右键菜单，添加图标和点击事件&quot; class=&quot;headerlink&quot; title=&quot;pyqt小记 | 添加右键菜单，添加图标和点击事件&quot;&gt;&lt;/a&gt;pyqt小记 | 添加右键菜单</summary>
      
    
    
    
    
    <category term="PyQt" scheme="https://jlexzhong.github.io/blog/tags/PyQt/"/>
    
    <category term="GUI" scheme="https://jlexzhong.github.io/blog/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/30/tomotoes_blog/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/30/tomotoes_blog/</id>
    <published>2021-08-30T10:09:42.000Z</published>
    <updated>2021-08-30T16:06:25.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结"><a href="#🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结" class="headerlink" title="🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结"></a>🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结</h1><p><strong>主页模板地址</strong>：<code>https://github.com/Tomotoes/HomePage</code></p><p><strong>中文使用文档</strong>：<code>https://github.com/Tomotoes/HomePage/blob/master/README.zh_CN.md</code></p><p>配置步骤在作者的使用文档中写的以及非常详细了，我总结一下如何<strong>自定义</strong>。</p><h2 id="标题、文字、头像"><a href="#标题、文字、头像" class="headerlink" title="标题、文字、头像"></a>标题、文字、头像</h2><p>在<code>config.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"head"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"钟军的小黑板"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Author:Jlex Zhong,Category:Personal Blog"</span><span class="token punctuation">,</span><span class="token property">"favicon"</span><span class="token operator">:</span> <span class="token string">"favicon.ico"</span>  <span class="token comment">// 暂未找到网站图标的修改方法</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"intro"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Jlex Zhong"</span><span class="token punctuation">,</span><span class="token property">"subtitle"</span><span class="token operator">:</span> <span class="token string">"Wellcome to my HomePage"</span><span class="token punctuation">,</span><span class="token property">"enter"</span><span class="token operator">:</span> <span class="token string">"enter"</span><span class="token punctuation">,</span><span class="token property">"supportAuthor"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"background"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"main"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Jlex Zhong"</span><span class="token punctuation">,</span><span class="token property">"signature"</span><span class="token operator">:</span> <span class="token string">"向日葵晚上在干啥呢？"</span><span class="token punctuation">,</span> <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"assets/avatar.jpg"</span><span class="token punctuation">,</span> <span class="token comment">// 头像，将路径下的图片替换即可</span><span class="token property">"height"</span><span class="token operator">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span><span class="token property">"width"</span><span class="token operator">:</span> <span class="token string">"100"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加页面"><a href="#增加页面" class="headerlink" title="增加页面"></a>增加页面</h2><p>在<code>config.json</code>中</p><pre class="line-numbers language-none"><code class="language-none">"ul": {"first": {"href": "blog/","icon": "blog","text": "Blog"},"second": {"href": "blog/about/","icon": "guanyuwo","text": "About Me"},"third": {"href": "mailto:junzhong0917@163.com","icon": "email","text": "Email"},"fourth": {"href": "blog/about/",  //我添加的页面"icon": "AIRESEARCH","text": "AI Lab"},"five": {"href": "https://github.com/JlexZhong","icon": "github","text": "Github"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>src\components\main.pug</code></p><pre class="line-numbers language-pug" data-language="pug"><code class="language-pug"><span class="token tag">ul</span><span class="token tag">li</span><span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span><span class="token tag">i<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">icon icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span><span class="token tag">span<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">data-translate</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">#{first.text}</span><span class="token tag">li</span><span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span><span class="token tag">i<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">icon icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span><span class="token tag">span<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">data-translate</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">#{second.text}</span><span class="token tag">li</span><span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>third<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>third<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> target<span class="token operator">=</span><span class="token string">"_blank"</span></span><span class="token punctuation">)</span></span></span><span class="token tag">i<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">icon icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>third<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span><span class="token tag">span<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">data-translate</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>third<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">#{third.text}</span><span class="token tag">li</span><span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fourth<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fourth<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> target<span class="token operator">=</span><span class="token string">"_blank"</span></span><span class="token punctuation">)</span></span></span><span class="token tag">i<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">icon icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fourth<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span><span class="token tag">span<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">data-translate</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fourth<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">#{fourth.text}</span><span class="token tag">li</span><span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>five<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>five<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> target<span class="token operator">=</span><span class="token string">"_blank"</span></span><span class="token punctuation">)</span></span></span><span class="token tag">i<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">icon icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>five<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span><span class="token tag">span<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">data-translate</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>five<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">#{five.text}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更换图标"><a href="#更换图标" class="headerlink" title="更换图标"></a>更换图标</h2><ol><li>到阿里矢量图标网站中找到自己的图标，并添加到一个项目中。<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li><li>把图标调成白色</li><li>进入项目设置，把这些勾选上</li><li><img src="/blog/blog/2021/08/30/tomotoes_blog/setting.png"></li><li>点击Font Class, 查看在线链接，点击该链接</li><li><img src="/blog/blog/2021/08/30/tomotoes_blog/iconfont.png"></li><li>复制链接中的所有内容，除了以下部分，其余全部替换掉。</li></ol><pre class="line-numbers language-none"><code class="language-none">.icon {display: block;width: 1.5em;height: 1.5em;margin: 0 auto;fill: currentColor;font-family: 'iconfont' !important;font-size: inherit;font-style: normal;-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后去<code>config.json</code>中修改图标的名称，不用加<code>icon-</code>。</p>]]></content>
    
    
    <summary type="html">🎃一个坏掉的番茄个人主页——魔改教程、遇坑总结！</summary>
    
    
    
    <category term="hexo" scheme="https://jlexzhong.github.io/blog/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://jlexzhong.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/23/first_blog/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/23/first_blog/</id>
    <published>2021-08-23T14:42:55.000Z</published>
    <updated>2021-08-23T14:48:16.622Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，这是我的第一篇博客，见证了自建个人博客的成功。</p><p>接下来，我将在这里发布我的学习记录和问题，以及一些项目，敬请期待！</p><p>本人非科班选手，如有不足还望各位指正哦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家好，这是我的第一篇博客，见证了自建个人博客的成功。&lt;/p&gt;
&lt;p&gt;接下来，我将在这里发布我的学习记录和问题，以及一些项目，敬请期待！&lt;/p&gt;
&lt;p&gt;本人非科班选手，如有不足还望各位指正哦！&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="生活" scheme="https://jlexzhong.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/23/hello-world/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/23/hello-world/</id>
    <published>2021-08-23T13:29:17.783Z</published>
    <updated>2021-08-30T02:49:05.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo+Github+matery免费搭建个人博客教程</title>
    <link href="https://jlexzhong.github.io/blog/2021/08/23/build-blog/"/>
    <id>https://jlexzhong.github.io/blog/2021/08/23/build-blog/</id>
    <published>2021-08-23T04:22:09.000Z</published>
    <updated>2021-08-30T14:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github-matery免费搭建个人博客详细教程"><a href="#Hexo-Github-matery免费搭建个人博客详细教程" class="headerlink" title="Hexo+Github+matery免费搭建个人博客详细教程"></a>Hexo+Github+matery免费搭建个人博客详细教程</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/blog/blog/2021/08/23/build-blog/1.png"></p><p><img src="/blog/blog/2021/08/23/build-blog/2.png"></p><p><img src="/blog/blog/2021/08/23/build-blog/3.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>安装<strong>Node.js</strong>，一直默认。输入：（查看是否安装正确）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>添加环境变量： <code>C:\Program Files\nodejs\ </code></p></li><li><p>环境变量：<code>C:\Users\26780\AppData\Roaming\npm</code></p></li></ul><h3 id="配置npm"><a href="#配置npm" class="headerlink" title="配置npm"></a>配置npm</h3><p>查看<strong>npm</strong>是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>出现<strong>BUG</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> install出现一直停留在“fetchMetadata: sill resolveWithNewModule find-cache-dir@“<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解决：更换国内镜像源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">更换成淘宝的源<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org – 配置后可通过下面方式来验证是否成功 <span class="token function">npm</span> config get registry – 或npm info express<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装<strong>hexo</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若出现warning，这是募捐提示，忽略即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> fund<span class="token variable">`</span></span> <span class="token keyword">for</span> details<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不想看到，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --no-fund<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p><strong>Github</strong>安装，教程网上很多请自行寻找，并配置好<strong>SSH-Key</strong></p><h2 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h2><ol><li><p>建立空文件夹，我的是Blog，将来会在这个文件夹内存放与博客有关的内容</p></li><li><p>打开GIt Bash 或者命令行，输入：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>文件夹内会出现一些配置文件</p><ul><li><code>node_modules:</code> 依赖包</li><li><code>public：</code>存放生成的页面</li><li><code>scaffolds：</code>生成文章的一些模板</li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code><strong>主题</strong></li><li><code>_config.yml:</code> 博客的<strong>配置文件</strong></li></ul></li><li><p>执行：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new hello Hexo    //新建一篇名为<span class="token string">"hello Hexo"</span>的博客hexo g                 //生成静态文件hexo s                 //本地部署预览<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>会输出：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO  Hexo is running at http://localhost:4000 <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会出现加载不了的情况，因为4000端口太常用了，导致冲突。使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server -p <span class="token number">5000</span> //更改端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a><strong>hexo常用命令</strong></h3><ul><li>初始化</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo -g //安装Hexo<span class="token function">npm</span> update hexo -g //升级 hexo init //初始化博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>命令简写</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"我的博客"</span> <span class="token operator">=</span> hexo new <span class="token string">"我的博客"</span> //新建文章hexo g <span class="token operator">=</span> hexo generate //生成hexo s <span class="token operator">=</span> hexo server //启动服务预览hexo d <span class="token operator">=</span> hexo deploy //部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server //Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s //静态模式hexo server -p <span class="token number">5000</span> //更改端口hexo server -i <span class="token number">192.168</span>.1.1 //自定义 IPhexo clean //清除缓存，若是网页正常情况下可以忽略这条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><ol><li>修改Blog文件夹下的**_config.yml**，在末尾修改成如下格式：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/JlexZhong/JlexZhong.github.io.git<span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   repo后的地址就是博客仓库的https地址</p><ol start="2"><li>安装git部署插件：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>然后输入命令：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean //清理静态文件hexo g //生成静态文件hexo d //部署<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>出现<strong>bug</strong>：</p><p>解决：</p><ul><li><p>如果不是代理问题，在_config.yml文件中把repo：后的地址改为<a href="mailto:git@github.com">git@github.com</a>:JlexZhong/JlexZhong.github.io.git</p></li><li><p>是代理问题，清除代理</p></li></ul></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">remote: Permission to JlexZhong/JlexZhong.github.io.git denied to junz2001.fatal: unable to access <span class="token string">'https://github.com/JlexZhong/JlexZhong.github.io.git/'</span><span class="token builtin class-name">:</span> The requested URL returned error: <span class="token number">403</span><span class="token punctuation">[</span>41mFATAL<span class="token punctuation">[</span>49m <span class="token punctuation">{</span>err: Error: Spawn failedat ChildProcess.<span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span> <span class="token punctuation">(</span>E:<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>hexo-util<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>spawn.js:51:21<span class="token punctuation">)</span>at ChildProcess.emit <span class="token punctuation">(</span>events.js:400:28<span class="token punctuation">)</span>at ChildProcess.cp.emit <span class="token punctuation">(</span>E:<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>cross-spawn<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>enoent.js:34:29<span class="token punctuation">)</span>at Process.ChildProcess._handle.onexit <span class="token punctuation">(</span>internal/child_process.js:277:12<span class="token punctuation">)</span> <span class="token punctuation">{</span>code: <span class="token number">128</span><span class="token punctuation">}</span><span class="token punctuation">}</span> Something's wrong. Maybe you can <span class="token function">find</span> the solution here: %s <span class="token punctuation">[</span>4mhttps://hexo.io/docs/troubleshooting.html<span class="token punctuation">[</span>24m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>此时博客已经上线啦！可以通过网络访问了。浏览器输入博客网站地址<strong>xxxx.github.io</strong></p></li><li><p><strong>修改域名</strong>：</p><p>现在你的个人网站的地址是<code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><blockquote><p>我没有选择购买域名，等后期再来更新吧</p></blockquote></li></ol><h3 id="发布博客："><a href="#发布博客：" class="headerlink" title="发布博客："></a>发布博客：</h3><ul><li>先<code>hexo new post "article title"</code>新建一篇文章，</li><li>在博客文件夹，<code>Blog/source/_posts</code>目录下回多出一个Markdown文件，编写完markdown文件后，保存</li><li>根目录下输入<code>hexo g</code>生成静态网页</li><li>然后输入<code>hexo s</code>可以本地预览效果</li><li>最后输入<code>hexo d</code>上传到<code>github</code>上</li></ul><h3 id="config-yml文件的修改建议："><a href="#config-yml文件的修改建议：" class="headerlink" title="_config.yml文件的修改建议："></a><code>_config.yml</code><strong>文件的修改建议</strong>：</h3><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li><li><code>subtitle</code>选项：在我使用的主题当中即为网页首页中间的字体块，若为空将显示为<strong>subtitle</strong></li><li><code>post_asset_folder</code>选项设置为：true。当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。</li></ul><h2 id="向hexo博客中插入图片"><a href="#向hexo博客中插入图片" class="headerlink" title="向hexo博客中插入图片"></a>向hexo博客中插入图片</h2><ul><li><p>进入博客根目录配置<code>_config.yml</code>:将<code>post_asset_folder: false·</code>改为<code>post_asset_folder: true</code></p></li><li><p>安装插件:</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image -- save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>此时再执行命令 :</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n article_name <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了</p></li><li><p>添加图片:在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code></p></li></ul><h2 id="文章Front-matter"><a href="#文章Front-matter" class="headerlink" title="文章Front-matter"></a>文章Front-matter</h2><p><code>Front-matter</code> 是<code>md</code>文件最上方以 <code>---</code>分隔的区域，用于指定个别文件的变量.<code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><h3 id="选项详解"><a href="#选项详解" class="headerlink" title="选项详解"></a>选项详解</h3><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><ol><li><p>在哪找？</p><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></li><li><p>cd 进blog文件夹根目录，输入：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone 主题http链接 themes/主题名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   主题会下载到themes文件夹下。</p><ol start="3"><li>我用的是<a href="https://github.com/blinkfox/hexo-theme-matery%EF%BC%8C%E4%B8%BB%E9%A2%98%E5%90%8D%E7%A7%B0%E6%98%AFblinkfox%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BE%93%E5%85%A5%EF%BC%9A">https://github.com/blinkfox/hexo-theme-matery，主题名称是blinkfox，所以输入：</a></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery themes/blinkfox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p>在下载的主题文件夹内有<strong>使用文档</strong>，中英文版本十分友好。</p></li><li><p>切换主题，找到根目录的_config.yml，将<code>landscape</code>改为<code>blinkfox</code>，也就是改为我们下载的主题名字：</p></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span><span class="token comment">## Plugins: https://hexo.io/plugins/</span><span class="token comment">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> landscape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>然后再次部署网站，<code>hexo g</code>，<code>hexo d</code></li></ol><h3 id="主题更多个性化"><a href="#主题更多个性化" class="headerlink" title="主题更多个性化"></a>主题更多个性化</h3><p>我们可以通过修改根目录或者主题目录下的<code>_config.yml</code>，实现更多的<strong>个性化</strong>。当然，不同的主题的语法还有不同，修改方法请参考各主题的使用文档。例如：</p><ul><li><p><strong>代码高亮</strong></p><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span><span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span><span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>文章字数统计插件</strong>（建议安装）</p><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span><span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span><span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span><span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更多请查看主题使用文档</li></ul><h2 id="Github-amp-Coding-Pages-双部署"><a href="#Github-amp-Coding-Pages-双部署" class="headerlink" title="Github &amp; Coding Pages 双部署"></a>Github &amp; Coding Pages 双部署</h2><p>后续更新</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://reclusew.github.io/2021/08/12/blog-setup/">https://reclusew.github.io/2021/08/12/blog-setup/</a></p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-65">https://sunhwee.com/posts/6e8839eb.html#toc-heading-65</a></p><p><a href="https://blog.csdn.net/weixin_42334475/article/details/101055364?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.control">https://blog.csdn.net/weixin_42334475/article/details/101055364?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control</a></p><p><a href="https://blog.csdn.net/Fitz1318/article/details/86548129?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162977080816780269848140%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=162977080816780269848140&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-86548129.pc_search_result_control_group&amp;utm_term=hexo+%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/Fitz1318/article/details/86548129?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162977080816780269848140%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=162977080816780269848140&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-86548129.pc_search_result_control_group&amp;utm_term=hexo+%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87&amp;spm=1018.2226.3001.4187</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到这里，相信您已经搭建出自己的个人博客网站了！</p>]]></content>
    
    
    <summary type="html">记录一下自建博客的心路历程，使用Hexo+Github搭建个人博客，快进来看看吧！</summary>
    
    
    
    <category term="博客搭建" scheme="https://jlexzhong.github.io/blog/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="搭建博客" scheme="https://jlexzhong.github.io/blog/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://jlexzhong.github.io/blog/tags/hexo/"/>
    
    <category term="github" scheme="https://jlexzhong.github.io/blog/tags/github/"/>
    
    <category term="matery" scheme="https://jlexzhong.github.io/blog/tags/matery/"/>
    
  </entry>
  
</feed>
